#!/usr/bin/env python2

import argparse
import itertools
import gzip
import sys

parser = argparse.ArgumentParser(description='Convert from UAI-08 format to DOT (Graphviz)')
parser.add_argument('--output', '-o', type=str, 
        help='File to store the resulting graph in. Default is to add a ".dot" \
        extension to the input file (replacing .uai, if present). Set this \
        to "-" to write to stdout.')
parser.add_argument('--markov', action='store_true',
        help='Write Markov networks as MRFs rather than factor graphs.')
parser.add_argument('--fg', action='store_true',
        help='Write Bayesian networks as factor graphs.')
parser.add_argument('file', type=str, 
        help='UAI-08 file to convert.')
args = parser.parse_args()

outfile = args.output
if not outfile:
    outfile = args.file
    if outfile[-4:].lower() == '.uai':
        outfile = outfile[:-4] + '.dot'
    else:
        outfile = outfile + '.dot'

############# Parse the UAI file ##############################################
with gzip.open(args.file) if args.file.endswith('.gz') else open(args.file) as fh:
    graph_type = fh.readline().strip().lower()
    nvar = int(fh.readline())
    card = [int(x) for x in fh.readline().split()]
    nfac = int(fh.readline())

    factors = []
    for i in xrange(nfac):
        line = [int(x) for x in fh.readline().split()]
        factors.append(line[1:])
    # Unless we want to store the actual tables in the DOT file as 
    # metadata, this is as far as we need to read.

############# Write the DOT file ##############################################
mode = 'fg'
if graph_type == 'bayes' and not args.fg:
    mode = 'bayes'
elif args.markov:
    mode = 'markov'
    edges = set() # Bookkeeping to avoid adding edges twice.

if args.output == '-':
    fh = sys.stdout
else:
    fh = open(outfile, 'w')

if mode == 'bayes':
    fh.write('digraph "%s" {\n' % args.file)
else:
    fh.write('graph "%s" {\n' % args.file)
fh.write('node [shape=circle, fixedsize=true]; ' + 
        '; '.join('V%d [label=%d]' % (i, i) for i in xrange(nvar)) + ';\n')
if mode == 'fg':
    fh.write('node [shape=square, fixedsize=true]; ' + 
            '; '.join('F%d [label=%d]' % (i, i) for i in xrange(nfac)) + ';\n')
for i, fac in enumerate(factors):
    if mode == 'fg':
        for var in fac:
            fh.write('F%d -- V%d;\n' % (i, var))
    elif mode == 'markov':
        for v1, v2 in itertools.combinations(fac, 2):
            if (v1, v2) not in edges:
                fh.write('V%d -- V%d;\n' % (v1, v2))
                edges.add((v1, v2))
    elif mode == 'bayes':
        for var in fac[:-1]:
            fh.write('V%d -> V%d;\n' % (var, fac[-1]))
fh.write('overlap=scale;\n')
fh.write('label="%s";\n' % args.file)
fh.write('}\n')
